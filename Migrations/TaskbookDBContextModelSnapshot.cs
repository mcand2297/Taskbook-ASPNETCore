// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taskbook_ASPNETCore.Models;

namespace Taskbook_ASPNETCore.Migrations
{
    [DbContext(typeof(TaskbookDBContext))]
    partial class TaskbookDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.Activity", b =>
                {
                    b.Property<int>("activityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description")
                        .IsRequired();

                    b.Property<int>("teamId");

                    b.Property<string>("title")
                        .IsRequired();

                    b.HasKey("activityId");

                    b.HasIndex("teamId");

                    b.ToTable("activities");
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.Response", b =>
                {
                    b.Property<int>("responseId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("activityId");

                    b.Property<string>("content")
                        .IsRequired();

                    b.HasKey("responseId");

                    b.HasIndex("activityId");

                    b.ToTable("responses");
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.Task", b =>
                {
                    b.Property<int>("taskId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("activityId");

                    b.Property<string>("description")
                        .IsRequired();

                    b.Property<bool>("isCompleted");

                    b.HasKey("taskId");

                    b.HasIndex("activityId");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.TaskUser", b =>
                {
                    b.Property<int>("taskId");

                    b.Property<string>("userId");

                    b.HasKey("taskId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("taskUsers");
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.Team", b =>
                {
                    b.Property<int>("teamId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description")
                        .IsRequired();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("teamId");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.TeamUser", b =>
                {
                    b.Property<int>("teamId");

                    b.Property<string>("userId");

                    b.Property<bool>("isCreator");

                    b.HasKey("teamId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("teamUsers");
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("lastLogin");

                    b.Property<int>("responseId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("responseId")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Taskbook_ASPNETCore.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Taskbook_ASPNETCore.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Taskbook_ASPNETCore.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Taskbook_ASPNETCore.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.Activity", b =>
                {
                    b.HasOne("Taskbook_ASPNETCore.Models.Team", "team")
                        .WithMany("activities")
                        .HasForeignKey("teamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.Response", b =>
                {
                    b.HasOne("Taskbook_ASPNETCore.Models.Activity", "activity")
                        .WithMany("responses")
                        .HasForeignKey("activityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.Task", b =>
                {
                    b.HasOne("Taskbook_ASPNETCore.Models.Activity", "activity")
                        .WithMany("tasks")
                        .HasForeignKey("activityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.TaskUser", b =>
                {
                    b.HasOne("Taskbook_ASPNETCore.Models.Task", "task")
                        .WithMany("taskUsers")
                        .HasForeignKey("taskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Taskbook_ASPNETCore.Models.User", "user")
                        .WithMany("taskUsers")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.TeamUser", b =>
                {
                    b.HasOne("Taskbook_ASPNETCore.Models.Team", "team")
                        .WithMany("teamUsers")
                        .HasForeignKey("teamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Taskbook_ASPNETCore.Models.User", "user")
                        .WithMany("teamUsers")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Taskbook_ASPNETCore.Models.User", b =>
                {
                    b.HasOne("Taskbook_ASPNETCore.Models.Response", "response")
                        .WithOne("user")
                        .HasForeignKey("Taskbook_ASPNETCore.Models.User", "responseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
